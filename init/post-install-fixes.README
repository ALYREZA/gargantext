POST-INSTALL FIXES
==================

The Python library "cte_node" is full of bugs.
Here are a few fixes, necessary for the library to work properly.
They apply to cte_tree/models.py


                    def maybe_cast(field):
                        # If the ordering information specified a type to cast
                        # to, then use this type immediately, otherwise
                        # determine whether a variable-length character field
                        # should be cast into TEXT or if no casting is
                        # necessary. A None type defaults to the latter.
                        if type(field) == tuple and not field[1] is None:
                            return 'CAST (T."%s" AS %s)' % field
                        else:
                            if type(field) == tuple:
                                name = field[0]
                            else:
                                name = field
                            if self.query.model._meta.get_field_by_name(name)[
                                0].db_type().startswith('varchar'):
                                return 'CAST (T."%s" AS TEXT)' % name
                            else:
                                return 'T."%s"' % name

...shall become...

                    def maybe_cast(field):
                        # If the ordering information specified a type to cast
                        # to, then use this type immediately, otherwise
                        # determine whether a variable-length character field
                        # should be cast into TEXT or if no casting is
                        # necessary. A None type defaults to the latter.
                        if type(field) == tuple and not field[1] is None:
                            return 'CAST (T."%s" AS %s)' % field
                        else:
                            if type(field) == tuple:
                                name = field[0]
                            else:
                                name = field
                            return 'T."%s"' % name

...and you should replace...

                    def maybe_alias(table):
                        if self.query.table_map.has_key(table):
                            return self.query.table_map[table][0]
                        return table

...with...
                    
                    def maybe_alias(table):
                        if table in self.query.table_map:
                            return self.query.table_map[table][0]
                        return table